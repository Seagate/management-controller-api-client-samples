#!/usr/bin/env python3

# Copyright (c) 2022 Seagate Technology LLC and/or its Affiliates

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing, please email
# opensource@seagate.com

import base64
import sys
import urllib.request
import xml.dom.minidom
import ssl

class Base64Login:

    username = ''
    password = ''
    ip = ''

    def parseArguments(self) :

        '''
        This function does parsing of command line arguments provided by user.
        If any one of the argument is missing it throws respective error and prints help of command.

        :returns : None
        '''
        args = []
        for i in range(len(sys.argv)):
            args.append(sys.argv[i])

        if (len(args) == 2):
             if args.count("-h") == 1:
                self.showHelp()
        elif(len(args) == 7):
            self.username = args[2]
            self.password = args[4]
            self.ip = args[6]
        else:
            if args.count("-u") == 0:
                print("Username is missing. Please provide username as -u USERNAME ")
            if args.count("-p") == 0:
                print("Password is missing. Please provide passord as -p PASSWORD ")
            if args.count("-i") == 0:
                print("IP address of array is missing. Please provide ip as -i IP ")
            self.showHelp()

    def showHelp(self) :

        '''
        This function prints help section of script
        
        :returns : None
        '''

        print('''
        Usage: 1. ${0} [-u USERNAME] [-p PASSWORD] [-i IP]
               2. ${0} [-h]
        Description : Python script to access API using Basic Authentication with base64 encoding

        - Required Arguments:
            -u USERNAME,          Enter username
            -p PASSWORD,          Enter password
            -i IP,                Enter ip address of array
        - Optional Argument :
            -h,                   Show this help message and exit
        '''.format(sys.argv[0]))
        sys.exit(1)
    

    def base64Encoding(self, username, password):
        
        '''
        
        This function does Base64 encoding of username and password provided by user
        
        :param username : Username of user
        :param password : Password of user
        :returns auth_string: Authentication key generated by Base64 encoding of username and password 

        '''
        temp_string = bytes(username + ':' + password, "utf-8")
        encodedBytes = base64.b64encode(temp_string)
        auth_string = str(encodedBytes, "utf-8")
        return auth_string


    def login(self, url, auth_string):

        '''
        This function creates and performs login request
        
        :param url : URL for login request generated as - array_ip + 'api/login/'
        :param auth_string : Authentication key generated by encoding username and password
        :returns response: Response returned in XML format.
                        The content contains an OBJECT element. Within the OBJECT
                        element,a PROPERTY element with the "name" attribute of response
                        contains the "session key".

        '''
        req = urllib.request.Request(url)
        req.add_header('Authorization', 'Basic ' + auth_string)
        # Skip certificate verification
        context = ssl._create_unverified_context()
        response = urllib.request.urlopen(req, context=context)
        return response
        

    def showResponse(self, response):
        
        '''
        This function reads the response properties 
        
        :param response:Response returned in XML format.
                        The content contains an OBJECT element. Within the OBJECT
                        element,a PROPERTY element with the "name" attribute of response
                        contains the "session key".
        :returns sessionKey: Session key generated after login of user
        '''

        xmlDoc = xml.dom.minidom.parseString(response.read())
        loginObjs = xmlDoc.getElementsByTagName('OBJECT')
        loginProps = xmlDoc.getElementsByTagName('PROPERTY')
        sessionKey = ''
        for lProp in loginProps:
            name = lProp.getAttribute('name')
            print("Property = " + name)
            if name == 'response':
                sessionKey = lProp.firstChild.data
        print("Session Key = " + sessionKey + "\n" )
        return sessionKey

    def main(self):

        self.parseArguments()
        auth_string = self.base64Encoding(self.username, self.password)
        url = self.ip + '/api/login/'
        response = self.login(url, auth_string)
        sessionKey = self.showResponse(response)
        if sessionKey == "None":
            print("Login unsuccessful")
            return None
        print("Login successful")
        return sessionKey

def main():
    obj = Base64Login()
    obj.main()

if __name__ == "__main__":
    main()